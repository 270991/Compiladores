simbolos=["*",">","<"]
def main():
	tablaDeTokens=[]
	reservadas=["if","else","while","for", "int"]
	
	tabla_simbolos =[]
	result=''
	cadena=[]
	word=[]
	palabra=""
	edo=0 
	columna=0
	posicion=0 #fin de linea
	operadores = [62,60,43,45,61,33,47,42,37,35,46,58,123,125,91,93,40,41,59,44,124,38,39,34,32]
	estado_asterisco = [200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,223,224,225,226]	
	estado_final=[200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,300,301,302,303,304,305,306,307,308,309]
     
	lectura= open("datos.txt", "r")
	while True:
		linea=lectura.readline()
		for char in (linea):
				cadena.append(ord(char))

		cadena.append(32)
		#if (len(linea)-1):
			#cadena.append(3)
		
		while posicion < len(cadena):
			caracter=cadena[posicion]
			columna=columnas(caracter,operadores)
			edo=matriz[edo][columna]
			#print(edo)
			# print("*"+palabra+"*")
			salidas(edo,palabra, reservadas,tablaDeTokens,tabla_simbolos)
			

		
			if edo not in estado_asterisco:
				palabra=palabra+chr(caracter)
				posicion+=1

			
			if edo in estado_final:
				edo = 0
				palabra=""
			if edo==0:
				palabra=""
			

			
		if not linea:
			break
	lectura.close()
	
matriz = [#   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27 
	          # dig, E/e, let,   >,   <,   +,   -,   =,   !,   /,   *,   %,   #,   .,   :,   {,   },   [,   ],   (,   ),   ;,   ,,   |,   &,   ',   ", esp
	          [   1,  10,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  221,  222,  29,  30,  31,  32,  33,  34,   0],# 0  ini  
	          [   1,   2, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200,   5, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200],# 1  dig  
	          [ 500, 500, 500, 500, 500,   3,   3, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500],# 2  E/e  
	          [   4, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501],# 3  + -  
	          [   4, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201],# 4  dig  
	          [   6, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501],# 5    .  
	          [   6,   7, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202],# 6  dig  
	          [ 500, 500, 500, 500, 500,   8,   8, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500],# 7  E/e  
	          [   9, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501],# 8  + -  
	          [   9, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203],# 9  dig  
	          [  10,  10,  10, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204],# 10 let  
	          [ 205, 205, 205, 205, 205, 205, 205, 300, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205],# 11   >  
	          [ 206, 206, 206, 302, 206, 206, 206, 301, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206],# 12   <  
	          [ 207, 207, 207, 207, 207, 303, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207],# 13   +  
	          [ 208, 208, 208, 208, 208, 208, 304, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208],# 14   -  
	          [ 209, 209, 209, 209, 209, 209, 209, 305, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209],# 15   =  
	          [ 210, 210, 210, 210, 210, 210, 210, 306, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210],# 16   !  
	          [ 211, 211, 211, 211, 211, 211, 211, 211, 211, 307, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211],# 17   /  
	          [ 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212],# 18   *  
	          [ 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213],# 19   %  
	          [ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214],# 20   #  
	          [ 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215],# 21   .  
	          [ 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216],# 22   :  
	          [ 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217],# 23   {  
	          [ 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218],# 24   }  
	          [ 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219],# 25   [  
	          [ 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220],# 26   ]  
	          [ 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221],# 27   (  
	          [ 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222],# 28   )  
	          [ 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223],# 29   ;  
	          [ 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224],# 30   ,  
	          [ 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 308, 502, 502, 502, 502],# 31   |  
	          [ 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 309, 503, 503, 503],# 32   &  
	          [ 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225],# 33   '  
	          [ 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226] # 34   "  
	         ]

def columnas(caracter,operadores):
	if caracter >=48 and caracter <=57: #numeros
		columna= 0
		#word=word+chr(caracter)

	elif caracter >=97 and caracter <=122: #letras
		columna= 1

	elif caracter in operadores:
		columna= operadores.index(caracter)+3
			
	return columna
	
def salidas(edo,palabra,reservadas,tablaDeTokens,tabla_simbolos):
		if edo==200:
			print('Se encontró un número entero:')
			
			
		if edo==202:
			#word=word + chr(caracter)
			print('Se encontró un numero decimal:')
			
			

		if edo==204:
				if palabra in reservadas:
					tok= reservadas.index(palabra)+500
					tablaDeTokens.append([500,tok])
					print(tablaDeTokens)#regresar un espacio
				else:
					if palabra not in tabla_simbolos:
						tabla_simbolos.append(palabra)
						   = tabla_simbolos.index(palabra)
						tablaDeTokens.append([2000,ind])
						print(tabla_simbolos)
						print(tablaDeTokens)
					else:
						ind  = tabla_simbolos.index(palabra)
						tablaDeTokens.append([2000,ind])
						print(tabla_simbolos)
						print(tablaDeTokens)

		if edo==207:
			tok= simbolos.index(palabra)+1000
			tablaDeTokens.append([1000,tok])
		if edo==209:
			print('Se encontró un igual:')
		if edo==221:
			print('Se encontró un parentesis abierto:')
		if edo==222:
			print('Se encontró un parentesis cerrado:')

		if edo>=205:
			if palabra in simbolos:
				ind  = simbolos.index(palabra)+1000
				tablaDeTokens.append([1000,ind])
				print(tablaDeTokens)
		return 0



def retornar_lugar(edo):
  back = 0
  if (edo >= 200 and edo <= 226):
  	back = 1
  return back
		
if __name__ == '__main__':
	main()


